password = EUpZeW2IZiy26RMP
name = tndeyeamie456

import { useEffect, useState } from 'react'
import axios from 'axios';
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';


const getAvatar = (id) =>
  `https://randomuser.me/api/portraits/men/${id}.jpg`;

function Card() {
  const [columns, setColumns] = useState([
    // { title: "To do", items: [] },
    // { title: "In Progress", items: [] },
    // { title: "In Review", items: [] },
    // { title: "Done", items: [] },
  ]);

  const [newItem, setNewItem] = useState({ title: "", tag: "", date: "" });
  const [columnIndex, setColumnIndex] = useState(0);

  useEffect(() => {
    const fetchCards = async () => {
      try {
        const res = await axios.get("http://localhost:5000/cards");
        const loadedColumns = [
          { title: "To do", items: [] },
          { title: "In Progress", items: [] },
          { title: "In Review", items: [] },
          { title: "Done", items: [] },
        ];

        res.data.forEach((card) => {
          const colIndex = loadedColumns.findIndex(c => c.title === card.column);
          if (colIndex !== -1) {
            loadedColumns[colIndex].items.push(card);
          }
        });

        setColumns(loadedColumns);
      } catch (error) {
        console.error("Erreur de chargement des cartes :", error);
      }
    };

    fetchCards();
  }, []);

  // ➕ Ajouter une nouvelle carte
  const handleAddNewItem = async () => {
    if (!newItem.title || !newItem.tag || !newItem.date)
      return alert("Tous les champs sont requis !");

    try {
      const response = await axios.post("http://localhost:5000/cards", {
        ...newItem,
        column: columns[columnIndex].title,
        users: [Math.floor(Math.random() * 10) + 1],
      });

      const updatedColumns = [...columns];
      updatedColumns[columnIndex].items.unshift(response.data);
      setColumns(updatedColumns);
      setNewItem({ title: "", tag: "", date: "" });
      setColumnIndex(0);
    } catch (error) {
      console.error("Erreur lors de l’ajout :", error);
      alert("Erreur lors de l’ajout de la carte");
    }
  };

  const onDragEnd = (result) => {
    const { source, destination } = result;
    if (!destination) return;
  
    const updated = [...columns];
    const [movedItem] = updated[source.droppableId].items.splice(source.index, 1);
    updated[destination.droppableId].items.splice(destination.index, 0, movedItem);
    setColumns(updated);
  };
  

  return (
    <>
 {/* Modal pour ajout de carte */}
 <div className="modal fade" id="newItemModal" tabIndex="-1" aria-labelledby="newItemModalLabel" aria-hidden="true">
 <div className="modal-dialog">
   <div className="modal-content">
     <div className="modal-header">
       <h5 className="modal-title" id="newItemModalLabel">Ajouter une nouvelle carte</h5>
       <button type="button" className="btn-close" data-bs-dismiss="modal"></button>
     </div>
     <div className="modal-body">
       <input
         type="text"
         className="form-control mb-2"
         placeholder="Titre"
         value={newItem.title}
         onChange={(e) => setNewItem({ ...newItem, title: e.target.value })}
       />
       <input
         type="text"
         className="form-control mb-2"
         placeholder="Tag"
         value={newItem.tag}
         onChange={(e) => setNewItem({ ...newItem, tag: e.target.value })}
       />
       <input
         type="date"
         className="form-control mb-2"
         value={newItem.date}
         onChange={(e) => setNewItem({ ...newItem, date: e.target.value })}
       />
       <select
         className="form-select"
         value={columnIndex}
         onChange={(e) => setColumnIndex(Number(e.target.value))}
       >
         {columns.map((col, index) => (
           <option key={index} value={index}>
             {col.title}
           </option>
         ))}
       </select>
     </div>
     <div className="modal-footer">
       <button className="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
       <button className="btn btn-primary" onClick={handleAddNewItem} data-bs-dismiss="modal">Ajouter</button>
     </div>
   </div>
 </div>
</div>

 <DragDropContext onDragEnd={onDragEnd}>
        <div className="row">
          {columns.map((column, i) => (
            <div key={i} className="col-md-3 mb-3">
              <div className="card">
                <div className="card-header back fw-bold d-flex justify-content-between align-items-center">
                  {column.title}
                  <div>
                    <span className="badge bg-secondary me-1">{column.items.length}</span>
                    <button className="btn btn-sm btn-light me-1">+</button>
                    <button className="btn btn-sm btn-light">⋯</button>
                  </div>
                </div>

<Droppable droppableId={String(i)}>
                  {(provided) => (
                    <div
                      ref={provided.innerRef}
                      {...provided.droppableProps}
                      className="card-body p-2 back"
                    >
                      {column.items.map((item, j) => (
                        <Draggable key={item._id} draggableId={item._id} index={j}>
                          {(provided) => (
                            <div
                              className="card mb-3 shadow-sm border-0"
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                            >
                              <div className="card-body">
                                <h5 className="card-title mb-2">{item.title}</h5>
                                <span className="badge bg-primary mb-3">{item.tag}</span>
                                <div className="d-flex justify-content-between align-items-center">
                                  <div className="d-flex align-items-center gap-2 text-muted">
                                    <i className="bi bi-paperclip"></i>
                                    <i className="bi bi-flag text-warning"></i>
                                    <i className="bi bi-clock"></i>
                                    <small>{item.date}</small>
                                  </div>
                                  <div className="d-flex">
                                    {item.users.map((uid) => (
                                      <img
                                        key={uid}
                                        src={getAvatar(uid)}
                                        alt="avatar"
                                        className="rounded-circle border"
                                        width="28"
                                        height="28"
                                        style={{ marginLeft: "-8px", zIndex: 1 }}
                                      />
                                    ))}
                                  </div>
                                </div>
                              </div>
                            </div>
                          )}
                        </Draggable>
                      ))}
                      {provided.placeholder}
                    </div>
                  )}
                </Droppable>
              </div>
            </div>
          ))}
        </div>
      </DragDropContext>
    </>
  )
}

export default Card